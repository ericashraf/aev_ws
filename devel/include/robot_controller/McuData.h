// Generated by gencpp from file robot_controller/McuData.msg
// DO NOT EDIT!


#ifndef ROBOT_CONTROLLER_MESSAGE_MCUDATA_H
#define ROBOT_CONTROLLER_MESSAGE_MCUDATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_controller
{
template <class ContainerAllocator>
struct McuData_
{
  typedef McuData_<ContainerAllocator> Type;

  McuData_()
    : RobotPose_x(0.0)
    , RobotPose_y(0.0)
    , RobotPose_theta(0.0)
    , RobotLinearVel(0.0)
    , RobotAngularVel(0.0)
    , IMUOrientation(0.0)
    , IMUAngularVel(0.0)
    , IMULinearAcc(0.0)  {
    }
  McuData_(const ContainerAllocator& _alloc)
    : RobotPose_x(0.0)
    , RobotPose_y(0.0)
    , RobotPose_theta(0.0)
    , RobotLinearVel(0.0)
    , RobotAngularVel(0.0)
    , IMUOrientation(0.0)
    , IMUAngularVel(0.0)
    , IMULinearAcc(0.0)  {
  (void)_alloc;
    }



   typedef double _RobotPose_x_type;
  _RobotPose_x_type RobotPose_x;

   typedef double _RobotPose_y_type;
  _RobotPose_y_type RobotPose_y;

   typedef double _RobotPose_theta_type;
  _RobotPose_theta_type RobotPose_theta;

   typedef double _RobotLinearVel_type;
  _RobotLinearVel_type RobotLinearVel;

   typedef double _RobotAngularVel_type;
  _RobotAngularVel_type RobotAngularVel;

   typedef double _IMUOrientation_type;
  _IMUOrientation_type IMUOrientation;

   typedef double _IMUAngularVel_type;
  _IMUAngularVel_type IMUAngularVel;

   typedef double _IMULinearAcc_type;
  _IMULinearAcc_type IMULinearAcc;





  typedef boost::shared_ptr< ::robot_controller::McuData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_controller::McuData_<ContainerAllocator> const> ConstPtr;

}; // struct McuData_

typedef ::robot_controller::McuData_<std::allocator<void> > McuData;

typedef boost::shared_ptr< ::robot_controller::McuData > McuDataPtr;
typedef boost::shared_ptr< ::robot_controller::McuData const> McuDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_controller::McuData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_controller::McuData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_controller::McuData_<ContainerAllocator1> & lhs, const ::robot_controller::McuData_<ContainerAllocator2> & rhs)
{
  return lhs.RobotPose_x == rhs.RobotPose_x &&
    lhs.RobotPose_y == rhs.RobotPose_y &&
    lhs.RobotPose_theta == rhs.RobotPose_theta &&
    lhs.RobotLinearVel == rhs.RobotLinearVel &&
    lhs.RobotAngularVel == rhs.RobotAngularVel &&
    lhs.IMUOrientation == rhs.IMUOrientation &&
    lhs.IMUAngularVel == rhs.IMUAngularVel &&
    lhs.IMULinearAcc == rhs.IMULinearAcc;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_controller::McuData_<ContainerAllocator1> & lhs, const ::robot_controller::McuData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_controller

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robot_controller::McuData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_controller::McuData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_controller::McuData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_controller::McuData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_controller::McuData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_controller::McuData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_controller::McuData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "707c69cb979d3f4bb2b95ee1ee531d99";
  }

  static const char* value(const ::robot_controller::McuData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x707c69cb979d3f4bULL;
  static const uint64_t static_value2 = 0xb2b95ee1ee531d99ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_controller::McuData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_controller/McuData";
  }

  static const char* value(const ::robot_controller::McuData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_controller::McuData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 RobotPose_x\n"
"float64 RobotPose_y\n"
"float64 RobotPose_theta\n"
"\n"
"float64 RobotLinearVel\n"
"float64 RobotAngularVel\n"
"\n"
"float64 IMUOrientation\n"
"float64 IMUAngularVel\n"
"float64 IMULinearAcc\n"
;
  }

  static const char* value(const ::robot_controller::McuData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_controller::McuData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.RobotPose_x);
      stream.next(m.RobotPose_y);
      stream.next(m.RobotPose_theta);
      stream.next(m.RobotLinearVel);
      stream.next(m.RobotAngularVel);
      stream.next(m.IMUOrientation);
      stream.next(m.IMUAngularVel);
      stream.next(m.IMULinearAcc);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct McuData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_controller::McuData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_controller::McuData_<ContainerAllocator>& v)
  {
    s << indent << "RobotPose_x: ";
    Printer<double>::stream(s, indent + "  ", v.RobotPose_x);
    s << indent << "RobotPose_y: ";
    Printer<double>::stream(s, indent + "  ", v.RobotPose_y);
    s << indent << "RobotPose_theta: ";
    Printer<double>::stream(s, indent + "  ", v.RobotPose_theta);
    s << indent << "RobotLinearVel: ";
    Printer<double>::stream(s, indent + "  ", v.RobotLinearVel);
    s << indent << "RobotAngularVel: ";
    Printer<double>::stream(s, indent + "  ", v.RobotAngularVel);
    s << indent << "IMUOrientation: ";
    Printer<double>::stream(s, indent + "  ", v.IMUOrientation);
    s << indent << "IMUAngularVel: ";
    Printer<double>::stream(s, indent + "  ", v.IMUAngularVel);
    s << indent << "IMULinearAcc: ";
    Printer<double>::stream(s, indent + "  ", v.IMULinearAcc);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_CONTROLLER_MESSAGE_MCUDATA_H
